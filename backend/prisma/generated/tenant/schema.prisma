generator client {
  provider      = "prisma-client-js"
  output        = "../generated/tenant"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("TENANT_DATABASE_URL")
}

enum role {
  admin
  tutor
  accountant
}

enum paymentMethod {
  cash
  momo
}

enum PaymentStatus {
  PAID
  FAILED
  PENDING
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum Term {
  FIRST
  SECOND
  THIRD
}

enum ClassLevel {
  primary
  jhs
}

model admin {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  phone     String
  otp       String?
  token     String?
  role      role     @default(admin)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes     classRooms[]
  tutor       tutor[]
  students    student[]
  attendances Attendance[]
  assessments Assessment[]
  reports     TerminalReport[]
  transcripts Transcript[]
  events      Event[]
  timetables  Timetable[]
  payments    Payment[]
  settings    SchoolSetting[]
  guardians   Guardian[]
}

model classRooms {
  id          String   @id @default(uuid())
  classname   String
  description String?
  capacity    Int
  isFull      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tutor     tutor[]
  admin     admin[]
  Timetable Timetable[]
}

model tutor {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  picture   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject     Subject[]
  classes     classRooms[]
  students    student[]
  attendances Attendance[]
  assessments Assessment[]
  reports     TerminalReport[]
  Timetable   Timetable[]
  admin       admin[]
}

model Subject {
  id          String   @id @default(uuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tutors      tutor[]
  assessments Assessment[]
  reports     TerminalReport[]
}

model student {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String
  email       String?    @unique
  password    String?
  class       String
  level       ClassLevel
  gender      String
  dateOfBirth DateTime
  photoUrl    String?
  medicalInfo Json?
  guardianId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  guardian    Guardian?        @relation(fields: [guardianId], references: [id])
  attendances Attendance[]
  reports     TerminalReport[]
  assessments Assessment[]
  payments    Payment[]
  Transcript  Transcript[]
  tutor       tutor[]
  admin       admin[]
}

model Guardian {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students student[]
  admin    admin[]
}

model Assessment {
  id           String   @id @default(uuid())
  studentId    String
  subjectId    String
  tutorId      String?
  term         Term
  academicYear String
  caScore      Float?
  examScore    Float?
  createdAt    DateTime @default(now())

  student student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  tutor   tutor?  @relation(fields: [tutorId], references: [id])
  admin   admin[]
}

model TerminalReport {
  id                    String   @id @default(uuid())
  studentId             String
  term                  Term
  academicYear          String
  position              Int?
  finalGrade            String?
  finalScore            Float?
  remarks               String?
  behavior              String?
  discipline            String?
  extraCurricular       String?
  parentMeeting         String?
  feedback              String?
  finalClassPerformance Json
  finalClassAttendance  Json
  performance           Json // { subjectCode: { ca: 20, exam: 50 } }
  attendance            Json // { present: 20, absent: 2, late: 1 }
  headTeacherSignature  String?
  adminSignature        String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  student student @relation(fields: [studentId], references: [id])
  tutor   tutor[]
  admin   admin[]

  Subject Subject[]
}

model Transcript {
  id        String   @id @default(uuid())
  studentId String
  details   Json // list of terms and grades
  createdAt DateTime @default(now())

  student student @relation(fields: [studentId], references: [id])
  admin   admin[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin admin[]
}

model Timetable {
  id        String   @id @default(uuid())
  classId   String
  day       String
  subject   String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class classRooms @relation(fields: [classId], references: [id])
  tutor tutor[]
  admin admin[]
}

model Payment {
  id        String        @id @default(uuid())
  studentId String
  payee     String
  contact   String?
  amount    Float
  method    paymentMethod
  status    PaymentStatus
  reference String        @unique
  paidAt    DateTime
  createdAt DateTime      @default(now())

  student student @relation(fields: [studentId], references: [id])
  admin   admin[]
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  date      DateTime
  status    AttendanceStatus
  createdAt DateTime         @default(now())

  student student @relation(fields: [studentId], references: [id])
  tutor   tutor[]
  admin   admin[]
}

model SchoolSetting {
  id                 String   @id @default(uuid())
  schoolName         String?
  logoUrl            String?
  academicCalendar   Json?
  gradingPolicy      Json?
  classLevels        Json? // e.g., { primary: ["1", "2", "3"], jhs: ["1", "2"] }
  attendancePolicy   Json?
  paymentMethods     Json? // e.g., { cash: true, momo: true }
  contactInfo        Json? // e.g., { phone: "1234567890", email: "school@example.com" }
  schoolAddress      String?
  schoolEmail        String?
  schoolPhone        String?
  schoolWebsite      String?
  schoolMotto        String?
  schoolVision       String?
  schoolMission      String?
  schoolValues       Json? // e.g., { integrity: true, excellence: true, respect: true }
  schoolHistory      String?
  schoolAchievements Json? // e.g., { awards: ["Best School 2023"], milestones: ["Established in 2000"] }
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  admin              admin[]
}
